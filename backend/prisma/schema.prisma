// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String        @id @default(uuid())
  email      String        @unique
  name       String?
  password   String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  boards     Board[]
  sharedBoards UsersBoards[]
  assignedTasks Task[]
}

model Board {
  id         String        @id @default(uuid())
  name       String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  owner      User          @relation(fields: [ownerId], references: [id])
  ownerId    String
  lists      List[]        @relation("BoardToList")
  sharedWith UsersBoards[]
}

model UsersBoards {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  board    Board    @relation(fields: [boardId], references: [id])
  boardId  String
  sharedAt DateTime @default(now())
  role     String   @default("viewer") // "viewer", "editor", "admin"

  @@unique([userId, boardId])
}

model List {
  id        String   @id @default(uuid())
  name      String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  board     Board    @relation("BoardToList", fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  tasks     Task[]   @relation("ListToTask")
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  list        List     @relation("ListToTask", fields: [listId], references: [id], onDelete: Cascade)
  listId      String
  tag         Tag?     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId       String?
  assignee    User?    @relation(fields: [assigneeId], references: [id])
  assigneeId  String?
}

model Tag {
  id    String @id @default(uuid())
  name  String
  color String
  tasks Task[]
}

